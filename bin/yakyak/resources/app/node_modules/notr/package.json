{
  "name": "notr",
  "version": "1.1.2",
  "description": "Extremely simple notifications",
  "main": "notr.js",
  "scripts": {
    "prepublish": "coffee -m -c ./notr.coffee"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ttab/notr.git"
  },
  "keywords": [
    "notifications"
  ],
  "author": {
    "name": "Martin Algesten",
    "email": "martin@algesten.se"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ttab/notr/issues"
  },
  "homepage": "https://github.com/ttab/notr",
  "devDependencies": {
    "coffee-script": "^1.9.3"
  },
  "readme": "notr\n====\n\n## Motivation\n\nThere are a ton of complicated notification frameworks out there. What I need is:\n\n* Simple (no need for different animations)\n* Simple (no jQuery)\n* Simple (no built in icons)\n* Simple (reasonable defaults)\n\n## Compatibility\n\n* IE9+, FF, Chrome, Safari, iOS5+, Android\n\nNote that the transition effect may not work devices not supporting\nthe `transition` CSS style.\n\n## Installing with NPM\n\n```bash\nnpm install -S notr\n```\n\n### Installing with Bower\n\n```bash\nbower install -S notr\n```\n\n## Usage\n\nRequire it\n\n```coffee\nnotr = require('notr')\n```\n\nSimple message, shows for 4 seconds.\n\n```coffee\nnotr('Hello <b>World!</b>')\n```\n\nComplicated message, stays until clicked.\n\n```coffee\nnotr({\n    html: 'Hello <b>World!</b>'\n    stay: 0\n})\n```\n\nHide message manually.\n\n```coffee\nel = notr({\n    html: 'Hello <b>World!</b>'\n    stay: 0\n})\n\n... # sometime later\n\nel.hide() # div is extended with hide function\n```\n\nCallback on hide\n\n```javascript\nnotr('Hello <b>World!</b>', function() {\n    console.log('it closed');\n});\n```\n\nChange content of existing\n\n```\nnotr({\n    html: 'Hello <b>World!</b>'\n    id: 'myhello'\n})\n\n... # sometime later\n\nnotr({\n    html: 'Goodbye cruel world!'\n    id: 'myhello'\n})\n```\n\n## API\n\n#### notr(html, callback)\n\nShort form, equivalent to `el = notr({html:html, callback:callback})`\n\n#### notr(opts)\n\nShow a notification with possible options. Returns the `<div>` element.\n\nargs        | desc\n:---------- | :-----------------\n`html`      | Text `.innerHTML` of the notification `<div>`.\n`className` | `.className` of `<div>` in addition to `\"notr\"`. Default `\"alert alert-info\"`\n`stack`     | Stack to place the notification in. See `notr.defineStack()`. Default `\"def\"`\n`stay`      | Milliseconds to stay on screen. 0 to stay forever. Default 4000\n`id`        | Id to change content/settings of notification on subsequent calls. Default `null`\n`onclick`   | Click handler. Default `null` which hides the `<div>`\n`callback`  | Callback when notification is about to hide.\n\nReturns `<div>` extended with a `.hide()` function.\n\n#### notr.defineStack(name, parent, styles)\n\nTo define a stack on screen where notifications appear. The default\n(which can be changed) is:\n\n```coffee\nnotr.defineStack('def', 'body', {top:'65px', right:'15px'})\n```\n\nargs        | desc\n:---------- | :-----------------\n`name`      | Name of the stack. The default notification stack is `\"def\"`\n`parent`    | `document.querySelector` or element of where to `.appendChild` the stack.\n`styles`    | `el.style` styles to define for the stack.\n\n#### Default CSS styles\n\nThe notr default styles can be altered by overriding the default `.notr` css rule.\n\nHowever. Notr uses the `margin-top` and `opacity` css style to do the\ntransition animation. It's probably a bad idea to alter this value.\n\n```css\n.notr {\n    margin-top: 0; // do not change margin-top\n    opacity: 1.0;  // do not change opacity\n    float: left;   // probably a bad idea to change\n    clear: both;   // probably a bad idea to change\n    transition: margin-top 0.2s, opacity 0.2s;\n\n    min-width: 270px;\n    min-height: 50px;\n    margin-bottom: 3px;\n    background: white;\n    border: 1px solid #999;\n    padding: 5px;\n    box-shadow: 0 0 3px rgba(0,0,0,0.4);\n    cursor: pointer;\n}\n.notrstack {\n    position: fixed;\n    min-width: 270px;\n    min-height: 50px;\n    z-index: 9000;\n}\n```\n\n#### Events\n\nSome DOM events that are dispatched on the returned `<div>`.\n\nevent             | desc\n:---------------- | :-----------------\n`notr:beforeshow` | Before showing.\n`notr:show`       | When showing.\n`notr:beforehide` | Before hiding. Just before `opts.callback`.\n`notr:hide`       | After hiding.\n\nExample\n\n```javascript\nel = notr('Hi there')\nel.addEventListener('notr:show', function() {\n    console.log('here we go');\n});\n```\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright © 2015 TT Nyhetsbyrån\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "gitHead": "4f6977a236b6b2d8f1d86bb5f360b900f1ec4f00",
  "_id": "notr@1.1.2",
  "_shasum": "cc993bfa140fcd36ac55909d02516723b0b98275",
  "_from": "notr@>=1.1.2 <2.0.0"
}
